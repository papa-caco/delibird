-------------------------------TEST BUSCARPOKEMONRESERVADO-------------------------------
Lo que hace es, dado un id de un entrenador, buscar dentro de la lista de pokemones reservados
globales, encontrar al pokemon que se corresponde con ese id de reserva.


t_pokemon_entrenador_reservado* pokemonReservado1 = malloc(
			sizeof(t_pokemon_entrenador_reservado));
	pokemonReservado1->cantidad = 2;
	pokemonReservado1->pokemon = "Pikachu";
	pokemonReservado1->id_entrenadorReserva = 1;

	t_pokemon_entrenador_reservado* pokemonReservado2 = malloc(
			sizeof(t_pokemon_entrenador_reservado));
	pokemonReservado2->cantidad = 2;
	pokemonReservado2->pokemon = "Salchi";
	pokemonReservado2->id_entrenadorReserva = 2;

	t_pokemon_entrenador_reservado* pokemonReservado3 = malloc(
			sizeof(t_pokemon_entrenador_reservado));
	pokemonReservado3->cantidad = 1;
	pokemonReservado3->pokemon = "Bulbasaur";
	pokemonReservado3->id_entrenadorReserva = 56;

	t_pokemon_entrenador_reservado* pokemonReservado4 = malloc(
			sizeof(t_pokemon_entrenador_reservado));
	pokemonReservado4->cantidad = 3;
	pokemonReservado4->pokemon = "Salchi";
	pokemonReservado4->id_entrenadorReserva = 4;

	pokemonesReservadosEnElMapa = list_create();

	list_add(pokemonesReservadosEnElMapa, pokemonReservado1);
	list_add(pokemonesReservadosEnElMapa, pokemonReservado2);
	list_add(pokemonesReservadosEnElMapa, pokemonReservado3);
	list_add(pokemonesReservadosEnElMapa, pokemonReservado4);


	t_entrenador* unEntrenador = malloc(sizeof(t_entrenador));
	unEntrenador->id=56;

	t_entrenador* unEntrenador2 = malloc(sizeof(t_entrenador));
	unEntrenador2->id=4;



	printf("Los pokemones reservados son: \n");

	for (int j = 0; list_get(pokemonesReservadosEnElMapa, j) != NULL; j++) {
		t_pokemon_entrenador_reservado* pok =
				(t_pokemon_entrenador_reservado*) list_get(
						pokemonesReservadosEnElMapa, j);
		char* nombrePok = pok->pokemon;
		printf("%s(%d) y el entrenador que lo reservo es el %d \n", nombrePok, pok->cantidad, pok->id_entrenadorReserva);
	}
	printf("----------------------------------\n");

	t_pokemon_entrenador_reservado* pokAux = buscarPokemonReservado(unEntrenador->id);

	printf("El entrenador que reserv贸 a Bulbasaur es (debe ser 56): \n %d \n", pokAux->id_entrenadorReserva);

	pokAux = buscarPokemonReservado(unEntrenador2->id);

	printf("El entrenador que reserv贸 a Salchi con cantidad 3 es (debe ser 4): \n %d \n", pokAux->id_entrenadorReserva);

	pokAux = buscarPokemonReservado(2);

	printf("El entrenador que reserv贸 a Salchi con cantidad 2 es (debe ser 2): \n %d \n", pokAux->id_entrenadorReserva);
	
------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------TEST BUSCARENTRENADORDELARESERVA----------------------------------------------------
Dado un id de un entrenador, se busca en la lista de blockeados, al entrenador de dicho id. Esta funcion se llamabuscar
al de la reserva porque el id que se manda es el de un entrenador que reserv贸 un pokemon

colaBlockedEntrenadores = queue_create();

	t_entrenador* unEntrenador = malloc(sizeof(t_entrenador));
	unEntrenador->id = 56;

	t_entrenador* unEntrenador2 = malloc(sizeof(t_entrenador));
	unEntrenador2->id = 4;

	t_entrenador* unEntrenador3 = malloc(sizeof(t_entrenador));
	unEntrenador3->id = 35;

	queue_push(colaBlockedEntrenadores, unEntrenador);
	queue_push(colaBlockedEntrenadores, unEntrenador2);
	queue_push(colaBlockedEntrenadores, unEntrenador3);

	printf("Los entrenadores en blocked, son: \n");

	for (int j = 0; j < queue_size(colaBlockedEntrenadores); j++) {
		t_entrenador* aux = (t_entrenador*) queue_pop(colaBlockedEntrenadores);
		int idEntrenador = aux->id;
		printf("%d\n", idEntrenador);
		queue_push(colaBlockedEntrenadores, aux);
	}
	printf("----------------------------------\n");

	printf(
			"El entrenador que voy a buscar es el del id 56, y el encontrado es: \n");

	t_entrenador* aux = buscarEntrenadorDeLaReserva(unEntrenador->id);

	printf("%d \n", aux->id);

	printf("----------------------------------\n");

	printf("Verifico que el orden en blocked siga siendo el mismo: \n");

	for (int j = 0; j < queue_size(colaBlockedEntrenadores); j++) {
		t_entrenador* aux = (t_entrenador*) queue_pop(colaBlockedEntrenadores);
		int idEntrenador = aux->id;
		printf("%d\n", idEntrenador);
		queue_push(colaBlockedEntrenadores, aux);
	}
	printf("----------------------------------\n");

	printf(
			"El entrenador que voy a buscar es el del id 35, y el encontrado es: \n");

	aux = buscarEntrenadorDeLaReserva(unEntrenador3->id);

	printf("%d \n", aux->id);

	printf("----------------------------------\n");

	printf("Verifico que el orden en blocked siga siendo el mismo: \n");

	for (int j = 0; j < queue_size(colaBlockedEntrenadores); j++) {
		t_entrenador* aux = (t_entrenador*) queue_pop(colaBlockedEntrenadores);
		int idEntrenador = aux->id;
		printf("%d\n", idEntrenador);
		queue_push(colaBlockedEntrenadores, aux);
	}
	printf("----------------------------------\n");

	printf(
			"El entrenador que voy a buscar es el del id 4, y el encontrado es: \n");

	aux = buscarEntrenadorDeLaReserva(unEntrenador2->id);

	printf("%d \n", aux->id);

	printf("----------------------------------\n");

	printf("Verifico que el orden en blocked siga siendo el mismo: \n");

	for (int j = 0; j < queue_size(colaBlockedEntrenadores); j++) {
		t_entrenador* aux = (t_entrenador*) queue_pop(colaBlockedEntrenadores);
		int idEntrenador = aux->id;
		printf("%d\n", idEntrenador);
		queue_push(colaBlockedEntrenadores, aux);
	}
	
------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------TEST AGREGARPOKEMONAGLOBALESATRAPADOS------------------------------------------------
Dado un pokemon llegado del broker (e inicializado con cantidad 1), se lo agrega a globales atrapados. Si ya exista aumenta
elcontador de esa especie en la lista, y si no, crea uno nuevo con cantidad 1.


pokemonesAtrapadosGlobal = list_create();

	t_pokemon_entrenador* pokemonObjetivo1 = malloc(
			sizeof(t_pokemon_entrenador));
	pokemonObjetivo1->cantidad = 2;
	pokemonObjetivo1->pokemon = "Pikachu";

	list_add(pokemonesAtrapadosGlobal, pokemonObjetivo1);

	t_pokemon_entrenador* pokemonObtenido1 = malloc(
			sizeof(t_pokemon_entrenador));
	pokemonObtenido1->cantidad = 10;
	pokemonObtenido1->pokemon = "Pepito";

	list_add(pokemonesAtrapadosGlobal, pokemonObtenido1);

	printf("Los pokemones obtenidos iniciales globales son: \n");

	for (int j = 0; list_get(pokemonesAtrapadosGlobal, j) != NULL; j++) {
		t_pokemon_entrenador* pok = (t_pokemon_entrenador*) list_get(
				pokemonesAtrapadosGlobal, j);
		char* nombrePok = pok->pokemon;
		printf("%s(%d)\n", nombrePok, pok->cantidad);
	}
	printf("----------------------------------\n");

	printf(
			"Ahora agrego un pepito con cantidad 1, y un pikachu con cantidad 3. \n");
	printf(
			"OJO! Recordar que no importa la cantidad con la que venga, una vez que se pasa un pokemon a obtenidos es porque atrapo UNO SOLO \n");

	t_pokemon_entrenador* pokemonObjetivo2 = malloc(
			sizeof(t_pokemon_entrenador));
	pokemonObjetivo2->cantidad = 1;
	pokemonObjetivo2->pokemon = "Pepito";

	t_pokemon_entrenador* pokemonObtenido2 = malloc(
			sizeof(t_pokemon_entrenador));
	pokemonObtenido2->cantidad = 3;
	pokemonObtenido2->pokemon = "Pikachu";

	agregarPokemonAGlobalesAtrapados(pokemonObtenido2);
	agregarPokemonAGlobalesAtrapados(pokemonObjetivo2);

	printf("----------------------------------\n");

	printf("Los pokemones obtenidos globales ahora son: \n");

	for (int j = 0; list_get(pokemonesAtrapadosGlobal, j) != NULL; j++) {
		t_pokemon_entrenador* pok = (t_pokemon_entrenador*) list_get(
				pokemonesAtrapadosGlobal, j);
		char* nombrePok = pok->pokemon;
		printf("%s(%d)\n", nombrePok, pok->cantidad);
	}
	printf("----------------------------------\n");

	printf("Ahora agrego bulbasaur y charmander. Como su cantidad creada no es 1, va a agregar 20 y 2. Eso esta bien, solo\n");
	printf("que cuando nos lleguen del broker deberemos crearlos con cantidad 1, n veces.\n");

	t_pokemon_entrenador* pokemonObjetivo3 = malloc(
			sizeof(t_pokemon_entrenador));
	pokemonObjetivo3->cantidad = 2;
	pokemonObjetivo3->pokemon = "Bulbasaur";

	t_pokemon_entrenador* pokemonObtenido3 = malloc(
			sizeof(t_pokemon_entrenador));
	pokemonObtenido3->cantidad = 20;
	pokemonObtenido3->pokemon = "Charmander";

	agregarPokemonAGlobalesAtrapados(pokemonObtenido3);
	agregarPokemonAGlobalesAtrapados(pokemonObjetivo3);

	printf("----------------------------------\n");

	printf("Los pokemones obtenidos globales ahora son: \n");

	for (int j = 0; list_get(pokemonesAtrapadosGlobal, j) != NULL; j++) {
		t_pokemon_entrenador* pok = (t_pokemon_entrenador*) list_get(
				pokemonesAtrapadosGlobal, j);
		char* nombrePok = pok->pokemon;
		printf("%s(%d)\n", nombrePok, pok->cantidad);
	}
	printf("----------------------------------\n");


