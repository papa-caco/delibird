---------------------EXTRACCIÓN DE DATOS DE LAS LISTASDE LAS CONFIG-------------------------------
Código con el que podemos probar que las listas de las config se extraen correctamente

/*t_list * listita = extraer_posiciones_entrenadores();



	 for (int procesados = 0; procesados < 3; procesados++) {

	 t_posicion_entrenador* posicion = list_get(listita, procesados);

	 printf("-------------------El contenido de la posicion DENTRO DE LA LISTA es %d \n",
	 posicion ->pos_x);
	 printf("-------------------El contenido de la posicion DENTRO DE LA LISTA es %d \n",
	 posicion ->pos_y);

	 }

	 list_destroy(listita);
	 */
	/*t_list * objetivosEntrenadores = extraer_pokemones_entrenadores("POKEMON_ENTRENADORES");


	 for (int procesados = 0; procesados < 3; procesados++) {
	 printf("Los objetivos del entrenador numero %d son: \n", procesados);

	 t_list* objetivosUnEntrenadorPrint = list_get(objetivosEntrenadores, procesados);

	 for(int k = 0; list_get(objetivosUnEntrenadorPrint, k) != NULL; k++){
	 t_pokemon_entrenador* pokemonPrint = list_get(objetivosUnEntrenadorPrint, k);

	 printf("-------------------El pokemon es %s y su cantidad es %d \n",
	 pokemonPrint ->pokemon, pokemonPrint -> cantidad);
	 }
	 }

	 liberar_lista(objetivosEntrenadores);
	 */
	 --------------------------------------------------------------------------------------------------------
	 
	 -------------------------CREACIÓN DE LA LISTA DE ENTRENADORES-------------------------------------------
	 Si corremos el siguiente código en el main, podremos ver cuales son los datos de los entrenadores apenas
	 se los inicializa, cargándolos con los datos que vienen de las config.
	 
	 
	 /*
	 for (int i = 0; queue_is_empty(colaNewEntrenadores) == 0; i++) {
		t_entrenador* unEntrenador = (t_entrenador*) queue_pop(colaNewEntrenadores);
		printf("EL ENTRENADOR %d SE ENCUENTRA EN (%d, %d) \n", i + 1,
				unEntrenador->posicion->pos_x, unEntrenador->posicion->pos_y);
		printf("SUS POKEMONES OBJETIVO SON \n");
		for (int j = 0; list_get(unEntrenador->objetivoEntrenador, j) != NULL;
				j++) {
			t_pokemon_entrenador* pok = (t_pokemon_entrenador*) list_get(
					unEntrenador->objetivoEntrenador, j);
			char* nombrePok = pok->pokemon;
			printf("%s(%d)\n", nombrePok, pok->cantidad);
		}
		printf("LOS POKEMONES QUE YA TIENE SON: \n");
		for (int j = 0; list_get(unEntrenador->pokemonesObtenidos, j) != NULL;
				j++) {
			t_pokemon_entrenador* pok = (t_pokemon_entrenador*) list_get(
					unEntrenador->pokemonesObtenidos, j);
			char* nombrePok = pok->pokemon;
			printf("%s(%d)\n", nombrePok, pok->cantidad);
		}
		printf("----------------------------------\n");
	}
		printf("La cantidad de objetivoGlobal es: %d \n", list_size(objetivoGlobalEntrenadores));
	for (int procesados = 0; list_get(objetivoGlobalEntrenadores, procesados) !=NULL ; procesados++) {
		printf("-----------------Los objetivos globales son: ------------------\n");

			t_pokemon_entrenador* pokemonPrint = list_get(
					objetivoGlobalEntrenadores, procesados);

			printf("-------------------El pokemon es %s y su cantidad es %d \n",
					pokemonPrint->pokemon, pokemonPrint->cantidad);

	}
	
	*/